import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamApi {

    public static void main(String[] args){

        //Filter
        //Sort
        //All match
        //Any match
        //None match
        //Max
        //Min
        //Group

        List<Person> people = new ArrayList<>();
        people.add(new Person("James Bond", 20, Gender.MALE));
        people.add(new Person("Alina Smith", 33, Gender.FEMALE));
        people.add(new Person("Helen White", 57, Gender.FEMALE));
        people.add(new Person("Alex Boz", 14, Gender.MALE));
        people.add(new Person("Jamie Goa", 99, Gender.MALE));
        people.add(new Person("Anna Cook", 7, Gender.FEMALE));
        people.add(new Person("Zelda brown", 120, Gender.FEMALE));

        //Filter
        List<Person> females = people.stream()
                .filter(person -> person.getGender().equals(Gender.FEMALE))
                .collect(Collectors.toList());
//        females.forEach(System.out::println);

        //Sort
        List<Person> sorted = people.stream()
                .sorted(Comparator.comparing(Person::getAge))
                .collect(Collectors.toList());
//        sorted.forEach(System.out::println);

        //All match
        boolean allMatch = people.stream()
                .allMatch(person -> person.getAge()>5);
//        System.out.println(allMatch);

        //Any match
        boolean anyMatch = people.stream()
                .anyMatch(person -> person.getAge() >8);
//        System.out.println(anyMatch);

        //None match
        boolean noneMatch = people.stream()
                .noneMatch(person -> person.getName().equals("Antonio"));
//        System.out.println(noneMatch);

        //Max
        people.stream()
                .max(Comparator.comparing(Person::getAge))
                .ifPresent(System.out::println);

        //Min
        people.stream()
                .min(Comparator.comparing(Person::getAge))
                .ifPresent(System.out::println);

        //Group
        Map<Gender, List<Person>> groupByGender = people.stream()
                .collect(Collectors.groupingBy(Person::getGender));

        groupByGender.forEach((gender, people1) -> {
            System.out.println(gender);
            people1.forEach(System.out::println);
            System.out.println();
        });

        Optional<String> oldestFemale = people.stream()
                .filter(person -> person.getGender().equals(Gender.FEMALE))
                .max(Comparator.comparing(Person::getAge))
                .map(Person::getName);
        oldestFemale.ifPresent(System.out::println);



        List<Product> productsList = new ArrayList<Product>();
        //Adding Products
        productsList.add(new Product(1,"HP Laptop",25000f));
        productsList.add(new Product(2,"Dell Laptop",30000f));
        productsList.add(new Product(3,"Lenevo Laptop",28000f));
        productsList.add(new Product(4,"Sony Laptop",28000f));
        productsList.add(new Product(5,"Apple Laptop",90000f));

        List<Float> productPriceList2 =productsList.stream()
                .filter(p -> p.price > 30000)// filtering data
                .map(p->p.price)        // fetching price
                .collect(Collectors.toList()); // collecting as list
        System.out.println(productPriceList2);

        List<String> plist = productsList.stream()
                .filter(p-> p.name.startsWith("A"))
                .map(p-> p.name)
                .collect(Collectors.toList());
        System.out.println(plist);

        List<Integer> plist2 = productsList.stream()
                .filter(p-> p.id > 3)
                .map(p-> p.id)
                .collect(Collectors.toList());
        System.out.println(plist2);

        productsList.stream()
                .filter(product -> product.price == 30000)
                .forEach(product -> System.out.println(product.name));

        Stream.iterate(1, element->element+1)
                .filter(element->element%5==0)
                .limit(5)
                .forEach(System.out::println);

        // max() method to get max Product price
        Product productA = productsList.stream()
                .max((product1, product2)->product1.price > product2.price ? 1: -1).get();
        System.out.println(productA.price);

        // min() method to get min Product price
        Product productB = productsList.stream()
                .min((product1, product2)->product1.price > product2.price ? 1: -1).get();
        System.out.println(productB.price);

        // count number of products based on the filter
        long count = productsList.stream()
                .filter(product->product.price<30000)
                .count();
        System.out.println(count);

        // Converting product List into Set
        Set<Float> productPriceList =
                productsList.stream()
                        .filter(product->product.price < 30000)   // filter product on the base of price
                        .map(product->product.price)
                        .collect(Collectors.toSet());   // collect it as Set(remove duplicate elements)
        System.out.println(productPriceList);

        // Converting Product List into a Map
        Map<Integer,String> productPriceMap =
                productsList.stream()
                        .collect(Collectors.toMap(p->p.id, p->p.name));
        System.out.println(productPriceMap);
    }

}

enum Gender {
    MALE,
    FEMALE
}

class Person {
    private String name;
    private int age;
    private Gender gender;

    public Person(String name, int age, Gender gender) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", gender=" + gender +
                '}';
    }
}

class Product{
    int id;
    String name;
    float price;
    public Product(int id, String name, float price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }
}
